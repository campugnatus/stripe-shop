services:
  setup:
    # We use this service as a base for the api and app services as there's
    # some common setup to be done (user setup and such). The other option
    # would be to repeat the same setup in their corresponding Dockerfiles
    # which is fine but not very DRY hoho.
    build:
      context: .
      target: dev
      args:
        - USERID=$USERID
    volumes:
      - .:/app
    env_file:
      - dev.env
    command: scripts/setup.sh

  api:
    extends:
      service: setup
    depends_on:
      setup:
        condition: service_completed_successfully
    env_file:
      - dev.env
    volumes:
      - ./api:/app
      - ./stripes:/app/stripes
    ports:
      # this is where we're listening for browser connections
      - $API_HOST_PORT:$API_PORT
    hostname: $API_HOST
    command: bash -c 'scripts/setup.sh && npm run dev'

  app:
    extends:
      service: setup
    depends_on:
      setup:
        condition: service_completed_successfully
      api:
        condition: service_started
    env_file:
      - dev.env
    volumes:
      - ./app:/app
      - ./stripes:/app/stripes
    ports:
      # exposed for vite to be able to open a websocket there (HMR, yay!)
      - $APP_HOST_PORT:$APP_PORT
    hostname: $APP_HOST
    # --host option is needed here because otherwise vite listens only on
    #   localhost, and localhost here refers to the container, thus making it
    #   unreachable from the host
    command: bash -c 'scripts/setup.sh && npm run dev'

