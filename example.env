# This is an example environment file that serves to provide default values for
# some of the variables and to document the rest. You should copy it into
# dev.env and prod.env and customize those to your needs. Those files should
# remain local to your installation and not get pushed to git.

# From looking at this file alone it's impossible to determine the user of a
# given variable. And there are many possible users down the line: make.sh,
# docker build, vite build, docker compose, express, client (browser). Some of
# them are used during runtime and so must be provided to the production
# server.

# Variables starting with VITE_ will be interpolated into the client code, see
# https://vitejs.dev/guide/env-and-mode.html

NODE_ENV=development

SMTP_SERVER=smtp.mailtrap.io
SMTP_PORT=2525
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=info@stripeshop.localhost

API_HOST=api
API_PORT=3002
APP_HOST=app
APP_PORT=3000

# which host ports to map to the containers' ports
API_HOST_PORT=3002
APP_HOST_PORT=3000

# The user-facing endpoint is the Express.js server. This variable determines
# who serves the static files:
# - express - express server handles it itself
# - vite - express forwards the requests to vite on the defined APP_HOST and
#   APP_PORT. We use this during development for HMR to work
# - nginx - express is running behind a reverse-proxy which takes care of the
#   static files (express doesn't bother with static files in this case)
STATIC_SERVER=vite

STATIC_PATH=./dist

# relative to the WORKDIR of a container
DB_FILE=db/stripeshop.db

# The browser-facing URL
BASE_URL=http://localhost:$API_PORT

# This is necessary for "Sign In with Google" to work. If left undefined, the
# button won't be shown. For details, see
# https://developers.google.com/identity/sign-in/web/sign-in
VITE_GOOGLE_CLIENT_ID=

# Stripes get imported from figma and you need a token to access them
FIGMA_TOKEN=

# During production, must be defined on the server
SECRET="During development we don't particularly bother"

# ssh user@server that we deploy to
DEPLOY_TARGET=

# the images will be pushed to Docker Hub under the specified username
DOCKER_USERNAME=